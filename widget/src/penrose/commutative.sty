const {
    arrowLen = 150
    curveOffset = 20
    -- Arrowheads on Bezier curves encroach a bit on the target.
    -- We shorten them by this much.
    curveEndAdjust = 4
}

forall Targettable x {
    vec2 x.center = (?, ?)

    shape x.textBox = Rectangle {
        center : x.center
        width : 50
        height : 30
    }

    -- Useful for debugging but we don't want it in the actual output.
    -- shape x.text = Equation {
    --     center : x.textBox.center
    --     string : x.label
    --     fontSize : "11pt"
    -- }
    -- x.textLayering = x.text above x.textBox

    -- Sides of a targettable for attaching ends of k-cells.
    -- +-T-+
    -- L   R
    -- +-B-+
    vec2 x.left = x.center - (x.textBox.width / 2, 0)
    vec2 x.right = x.center + (x.textBox.width / 2, 0)
    vec2 x.top = x.center + (0, x.textBox.height / 2)
    vec2 x.bottom = x.center - (0, x.textBox.height / 2)
}

forall Cell f; Targettable A; Targettable B
where f := MakeCell(A, B) {
    vec2 f.start = (?, ?)
    vec2 f.end = (?, ?)

    ensure inRange(f.start[0], A.left[0], A.right[0])
    ensure inRange(f.start[1], A.top[1], A.bottom[1])
    ensure inRange(f.end[0], B.left[0], B.right[0])
    ensure inRange(f.end[1], B.top[1], B.bottom[1])

    shape f.shape = Line {
        start: f.start
        end: f.end
        endArrowhead: true
        strokeColor: rgba(0,0,0,100)
    }

    -- Make arrows short
    encourage minimal(normsq(f.end - f.start))

    -- Override center
    override f.center = (f.start + f.end) / 2

    f.cellTextLayeringA = A.textBox above f.shape
    f.cellTextLayeringB = B.textBox above f.shape
}

forall Cell f; Object A; Object B
where f := MakeCell(A, B); IsLeftHorizontal(f) {
    override B.center = A.center - (const.arrowLen, 0)
    override f.start = A.left
    override f.end = B.right
}

forall Cell f; Object A; Object B
where f := MakeCell(A, B); IsRightHorizontal(f) {
    override B.center = A.center + (const.arrowLen, 0)
    override f.start = A.right
    override f.end = B.left
}

forall Cell f; Object A; Object B
where f := MakeCell(A, B); IsUpVertical(f) {
    override B.center = A.center + (0, const.arrowLen)
    override f.start = A.top
    override f.end = B.bottom
}

forall Cell f; Object A; Object B
where f := MakeCell(A, B); IsDownVertical(f) {
    override B.center = A.center - (0, const.arrowLen)
    override f.start = A.bottom
    override f.end = B.top
}

forall Cell f; Object A; Object B
where f := MakeCell(A, B); IsRightDownDiagonal(f) {
    override B.center = A.center + (const.arrowLen, -const.arrowLen)
}

forall Cell f; Targettable A; Targettable B
where f := MakeCell(A, B); IsCurvedLeft(f) {
    vec2 dir = normalize(f.end - f.start)
    vec2 dirLeft = rot90(dir)
    vec2 mid = (f.end + f.start) / 2
    override f.center = mid + dirLeft * const.curveOffset
    override f.shape = Path {
        d: interpolateQuadraticFromPoints("open", f.start, f.center, f.end - dir*const.curveEndAdjust)
        endArrowhead: true
        strokeColor: rgba(0,0,0,100)
    }
}

forall Cell f; Targettable A; Targettable B
where f := MakeCell(A, B); IsCurvedRight(f) {
    vec2 dir = normalize(f.end - f.start)
    vec2 dirRight = rot90(rot90(rot90(dir))) -- lol
    vec2 mid = (f.end + f.start) / 2
    override f.center = mid + dirRight * const.curveOffset
    override f.shape = Path {
        d: interpolateQuadraticFromPoints("open", f.start, f.center, f.end - dir*const.curveEndAdjust)
        endArrowhead: true
        strokeColor: rgba(0,0,0,100)
    }
}

forall Cell a; Cell f; Cell g
where a := MakeCell(f, g) {
    -- TODO: need a custom svg function to create nice double arrow
}

-- TODO: similarly for monos, epis, etc.

-- forall Cell f; Object A; Object B
-- where f := MakeCell(A, B); FromLeft(f) {
--     override f.startX = A.left[0]
-- }

-- forall Cell f; Object A; Object B
-- where f := MakeCell(A, B); ToLeft(f) {
--     override f.endX = B.left[0]
-- }

-- forall Cell f; Object A; Object B
-- where f := MakeCell(A, B); FromRight(f) {
--     override f.startX = A.right[0]
-- }

-- forall Cell f; Object A; Object B
-- where f := MakeCell(A, B); ToRight(f) {
--     override f.endX = B.right[0]
-- }

-- forall Cell f; Object A; Object B
-- where f := MakeCell(A, B); FromTop(f) {
--     override f.startY = A.top[1]
-- }

-- forall Cell f; Object A; Object B
-- where f := MakeCell(A, B); ToTop(f) {
--     override f.endY = B.top[1]
-- }

-- forall Cell f; Object A; Object B
-- where f := MakeCell(A, B); FromBottom(f) {
--     override f.startY = A.bottom[1]
-- }

-- forall Cell f; Object A; Object B
-- where f := MakeCell(A, B); ToBottom(f) {
--     override f.endY = B.bottom[1]
-- }
